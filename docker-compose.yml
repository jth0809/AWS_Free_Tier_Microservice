services:
  nginx:
    build:
      context: .
      dockerfile: dockerfile.nginx
    command: [nginx-debug, '-g', 'daemon off;']
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - backend_network
    depends_on:
      - budget
      - edge
      - plan
      - member
      - orchestration
      - post
    restart: always
  budget:
    build:
      context: .
      dockerfile: dockerfile.budget
      args:
        TAG: jdh0809/easytrip:budget
    environment:
      - 'SERVER_PORT=8080'
      - 'POST_URL=${POST_URL}'
      - 'BUDGET_URL=${BUDGET_URL}'
      - 'PLAN_URL=${PLAN_URL}'
      - 'MEMBER_URL=${MEMBER_URL}'
      - 'REDIS_HOST=${REDIS_HOST}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'RABBITMQ_HOST=${RABBITMQ_HOST}'
      - 'RABBITMQ_PORT=${RABBITMQ_PORT}'
      - 'RABBITMQ_USERNAME=${RABBITMQ_USERNAME}'
      - 'RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}'
      - 'ISSUER_URI=${ISSUER_URI}'
      - 'POSTGRES_URL=${POSTGRES_URL}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
    ports:
      - "8080:8080"
    networks:
      - backend_network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
  
  edge:
    build:
      context: .
      dockerfile: dockerfile.edge
      args:
        TAG: jdh0809/easytrip:edge
    environment:
      - 'SERVER_PORT=8081'
      - 'BASE_URL=${BASE_URL}'
      - 'POST_URL=${POST_URL}'
      - 'BUDGET_URL=${BUDGET_URL}'
      - 'PLAN_URL=${PLAN_URL}'
      - 'MEMBER_URL=${MEMBER_URL}'
      - 'REDIS_HOST=${REDIS_HOST}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'RABBITMQ_HOST=${RABBITMQ_HOST}'
      - 'RABBITMQ_PORT=${RABBITMQ_PORT}'
      - 'RABBITMQ_USERNAME=${RABBITMQ_USERNAME}'
      - 'RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}'
      - 'ISSUER_URI=${ISSUER_URI}'
      - 'AWS_CLIENT_ID=${AWS_CLIENT_ID}'
      - 'AWS_CLIENT_SECRET=${AWS_CLIENT_SECRET}'

    ports:
      - "8081:8081"
    networks:
      - backend_network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
  
  plan:
    build:
      context: .
      dockerfile: dockerfile.location
      args:
        TAG: jdh0809/easytrip:plan
    environment:
      - 'SERVER_PORT=8082'
      - 'POST_URL=${POST_URL}'
      - 'BUDGET_URL=${BUDGET_URL}'
      - 'PLAN_URL=${PLAN_URL}'
      - 'MEMBER_URL=${MEMBER_URL}'
      - 'REDIS_HOST=${REDIS_HOST}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'RABBITMQ_HOST=${RABBITMQ_HOST}'
      - 'RABBITMQ_PORT=${RABBITMQ_PORT}'
      - 'RABBITMQ_USERNAME=${RABBITMQ_USERNAME}'
      - 'RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}'
      - 'ISSUER_URI=${ISSUER_URI}'
      - 'POSTGRES_URL=${POSTGRES_URL}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
    ports:
      - "8082:8082"
    networks:
      - backend_network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
  
  member:
    build:
      context: .
      dockerfile: dockerfile.member
      args:
        TAG: jdh0809/easytrip:member
    environment:
      - 'SERVER_PORT=8083'
      - 'POST_URL=${POST_URL}'
      - 'BUDGET_URL=${BUDGET_URL}'
      - 'PLAN_URL=${PLAN_URL}'
      - 'MEMBER_URL=${MEMBER_URL}'
      - 'REDIS_HOST=${REDIS_HOST}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'RABBITMQ_HOST=${RABBITMQ_HOST}'
      - 'RABBITMQ_PORT=${RABBITMQ_PORT}'
      - 'RABBITMQ_USERNAME=${RABBITMQ_USERNAME}'
      - 'RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}'
      - 'ISSUER_URI=${ISSUER_URI}'
      - 'POSTGRES_URL=${POSTGRES_URL}'
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
    ports:
      - "8083:8083"
    networks:
      - backend_network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
  
  orchestration:
    build:
      context: .
      dockerfile: dockerfile.orchestration
      args:
        TAG: jdh0809/easytrip:orchestration
    environment:
      - 'SERVER_PORT=8084'
      - 'POST_URL=${POST_URL}'
      - 'BUDGET_URL=${BUDGET_URL}'
      - 'PLAN_URL=${PLAN_URL}'
      - 'MEMBER_URL=${MEMBER_URL}'
      - 'REDIS_HOST=${REDIS_HOST}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'RABBITMQ_HOST=${RABBITMQ_HOST}'
      - 'RABBITMQ_PORT=${RABBITMQ_PORT}'
      - 'RABBITMQ_USERNAME=${RABBITMQ_USERNAME}'
      - 'RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}'
      - 'ISSUER_URI=${ISSUER_URI}'
    ports:
      - "8084:8084"
    networks:
      - backend_network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    restart: always
  
  post:
    build:
      context: .
      dockerfile: dockerfile.post
      args:
        TAG: jdh0809/easytrip:post
    environment:
      - 'SERVER_PORT=8085'
      - 'POST_URL=${POST_URL}'
      - 'BUDGET_URL=${BUDGET_URL}'
      - 'PLAN_URL=${PLAN_URL}'
      - 'MEMBER_URL=${MEMBER_URL}'
      - 'REDIS_HOST=${REDIS_HOST}'
      - 'REDIS_PORT=${REDIS_PORT}'
      - 'REDIS_PASSWORD=${REDIS_PASSWORD}'
      - 'RABBITMQ_HOST=${RABBITMQ_HOST}'
      - 'RABBITMQ_PORT=${RABBITMQ_PORT}'
      - 'RABBITMQ_USERNAME=${RABBITMQ_USERNAME}'
      - 'RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}'
      - 'ISSUER_URI=${ISSUER_URI}'
      - 'MONGODB_URI=${MONGODB_URI}'
      - 'MONGODB_DATABASE=${MONGODB_DATABASE}'
    ports:
      - "8085:8085"
    networks:
      - backend_network
    depends_on:
      - mongodb
      - redis
      - rabbitmq
    restart: always
  
  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=easytrip'
      - 'POSTGRES_PASSWORD=1234'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5432:5432'
    networks:
      - backend_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
  
  redis:
    image: 'redis:latest'
    environment:
      - 'REDIS_PASSWORD=test'
    ports:
      - '6379:6379'
    networks:
      - backend_network
    restart: always
  
  rabbitmq:
    image: 'rabbitmq:management'
    environment:
      - 'RABBITMQ_DEFAULT_USER=test'
      - 'RABBITMQ_DEFAULT_PASS=test'
      - 'RABBITMQ_MANAGEMENT_ENABLE=true'
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - backend_network
    restart: always
  
  mongodb:
    image: 'mongo:latest'
    environment:
      - 'MONGO_INITDB_ROOT_USERNAME=root'
      - 'MONGO_INITDB_ROOT_PASSWORD=1234'
    ports:
      - '27017:27017'
    networks:
      - backend_network
    restart: always

networks:
  backend_network:
    driver: bridge
  
volumes:
  postgres_data: